#!/usr/bin/env python3

import dataclasses
import datetime
import logging
from pathlib import Path
from typing import Any, Dict, List

import yaml

ROTATION_FILE = Path(__file__).resolve().parent / "rotation.yaml"
ROTATION_MEMBERS_FILE = Path(__file__).resolve().parent / "rotation-members.yaml"


@dataclasses.dataclass(frozen=True)
class RotationMembersFile:
    """Represents the contents of the rotation-members.yaml file."""

    members: List[str]

    @classmethod
    def from_yaml(cls, data: Dict[str, Any]) -> "RotationMembersFile":
        """Create an instance from a YAML dictionary."""
        return cls(members=data.get("members", []))

    def to_yaml(self) -> str:
        """Convert the instance to a YAML-compatible dictionary."""
        return yaml.safe_dump({"members": self.members})

    @classmethod
    def parse_file(cls, filepath: Path) -> "RotationMembersFile":
        """Load the rotation members from a YAML file."""
        try:
            with filepath.open(encoding="utf-8") as f:
                data = yaml.safe_load(f)
                return cls.from_yaml(data)
        except FileNotFoundError:
            logging.warning(
                f"file '%s' not found. Using empty rotation members file.", filepath
            )
            return cls(members=[])


@dataclasses.dataclass(frozen=True, order=True)
class Rotation:
    """Represents a single rotation entry."""

    start_time: datetime.datetime
    members: List[str]

    @classmethod
    def from_yaml(cls, data: Dict[str, Any]) -> "Rotation":
        """Create an instance from a YAML dictionary."""
        start_time = datetime.datetime.fromisoformat(data["start_time"])
        return cls(start_time=start_time, members=data.get("members", []))

    def to_yaml(self) -> Dict[str, Any]:
        """Convert the instance to a YAML-compatible dictionary."""
        as_dict = dataclasses.asdict(self)
        as_dict["start_time"] = self.start_time.isoformat()
        return as_dict


ROTATION_FILE_TOP_COMMENT = """\
# Rotation members yaml file.
#
# **Autogenerated, please do not edit manually.**
#
# If you want to extend the rotation, please use `./extend_rotation.py`.
# If you want to swap with someone else on the rotation, those edits are OK. :)
"""


@dataclasses.dataclass(frozen=True)
class RotationFile:
    """Represents the contents of the rotation.yaml file."""

    rotations: List[Rotation]

    @classmethod
    def from_yaml(cls, data: Dict[str, Any]) -> "RotationFile":
        """Create an instance from a YAML dictionary."""
        # Subtle: sort this, so `rotations` is always in order from
        # oldest -> newest.
        rotations = sorted(
            Rotation.from_yaml(rot) for rot in data.get("rotations") or []
        )
        return cls(rotations=rotations)

    def to_yaml_str(self) -> str:
        """Convert the instance to a YAML-compatible dictionary."""
        yaml_str = yaml.safe_dump(
            {"rotations": [rot.to_yaml() for rot in self.rotations]}
        )
        return f"{ROTATION_FILE_TOP_COMMENT}\n{yaml_str}"

    @classmethod
    def parse_file(cls, filepath: Path) -> "RotationFile":
        """Load the rotation from a YAML file."""
        try:
            with filepath.open(encoding="utf-8") as f:
                data = yaml.safe_load(f)
                return cls.from_yaml(data)
        except FileNotFoundError:
            logging.warning(
                f"file '%s' not found. Using empty rotation file.", filepath
            )
            return cls(rotations=[])
